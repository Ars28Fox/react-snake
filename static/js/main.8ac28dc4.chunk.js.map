{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BOARD_SIZE","DEFAULT_CELLS_VALUE","Array","fill","AVAILABLE_MOVES","checkAvailableSlot","position","Cell","type","className","App","React","useState","snake","setSnake","food","setFood","direction","setDirection","handleKeyDown","event","index","indexOf","key","useEffect","document","addEventListener","interval","gameLoop","clearInterval","setTimeout","newSnake","move","headSnake","length","push","sliceIndex","newFood","Math","floor","random","some","elem","generateFood","slice","map","row","indexR","cell","indexC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MAGMA,EAAa,GACbC,EAAsBC,MAAMF,GAAYG,KAAKD,MAAMF,GAAYG,KAAK,IACpEC,EAAkB,CAAC,YAAa,UAAW,aAAc,aAGzDC,EAAqB,SAAAC,GACvB,QAAQ,GACJ,KAAKA,GAAYN,EACb,OAAO,EACX,KAAKM,EAAW,EACZ,OAAON,EACX,QACI,OAAOM,IAkGbC,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OAAO,qBAAKC,UAAS,eAAUD,MAGpBE,EAlGH,WACR,MAA0BC,IAAMC,SAAS,CAAC,CAAC,EAAG,KAA9C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBH,IAAMC,SAAS,CAAC,EAAG,IAA3C,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCL,IAAMC,SAASR,EAAgB,IAAjE,mBAAOa,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,SAAAC,GAClB,IAAMC,EAAQjB,EAAgBkB,QAAQF,EAAMG,KACxCF,GAAS,GACTH,EAAad,EAAgBiB,KAIrCV,IAAMa,WAAU,WACZC,SAASC,iBAAiB,UAAWP,MAGzCR,IAAMa,WACF,WACI,IAAMG,EAAWC,IACjB,OAAO,kBAAMC,cAAcF,MAE/B,CAACd,IAEL,IAYMe,EAAW,WAiCb,OAhCgBE,YAAW,WACvB,IAAMC,EAAWlB,EACbmB,EAAO,GAEX,OAAQf,GACJ,KAAKb,EAAgB,GACjB4B,EAAO,CAAC,EAAG,GACX,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,EAAE,EAAG,GACZ,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,CAAC,EAAG,GACX,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,CAAC,GAAI,GAIpB,IAAMC,EAAY,CACd5B,EAAmB0B,EAASA,EAASG,OAAS,GAAG,GAAKF,EAAK,IAC3D3B,EAAmB0B,EAASA,EAASG,OAAS,GAAG,GAAKF,EAAK,KAG/DD,EAASI,KAAKF,GACd,IAAIG,EAAa,EACbH,EAAU,KAAOlB,EAAK,IAAMkB,EAAU,KAAOlB,EAAK,KAClDqB,EAAa,EAxCJ,WACjB,IAAIC,EACJ,GACIA,EAAU,CACNC,KAAKC,MAAMD,KAAKE,SAAWxC,GAC3BsC,KAAKC,MAAMD,KAAKE,SAAWxC,UAG/Ba,EAAM4B,MAAK,SAAAC,GAAI,OAAIA,EAAK,KAAOL,EAAQ,IAAMK,EAAK,KAAOL,EAAQ,OAErErB,EAAQqB,GA+BAM,IAEJ7B,EAASiB,EAASa,MAAMR,MA/EtB,MAoFV,OACI,8BACKnC,EAAoB4C,KAAI,SAACC,EAAKC,GAAN,OACrB,qBAAkBtC,UAAU,MAA5B,SACKqC,EAAID,KAAI,SAACG,EAAMC,GACZ,IAAIzC,EACAK,EAAM4B,MACF,SAAAC,GAAI,OAAIA,EAAK,KAAOK,GAAUL,EAAK,KAAOO,MACzC,QAOT,MANa,UAATzC,IACAA,EACIO,EAAK,KAAOgC,GACZhC,EAAK,KAAOkC,GACZ,QAED,cAAC,EAAD,CAAmBzC,KAAMA,GAAdyC,OAZhBF,SCjFXG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BZ,K","file":"static/js/main.8ac28dc4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst BOARD_SIZE = 10;\nconst DEFAULT_CELLS_VALUE = Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(0));\nconst AVAILABLE_MOVES = ['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft'];\nconst SPEED = 500;\n\nconst checkAvailableSlot = position => {\n    switch (true) {\n        case position >= BOARD_SIZE:\n            return 0;\n        case position < 0:\n            return BOARD_SIZE - 1;\n        default:\n            return position;\n    }\n};\n\nconst App = () => {\n    const [snake, setSnake] = React.useState([[1, 1]]);\n    const [food, setFood] = React.useState([0, 0]);\n    const [direction, setDirection] = React.useState(AVAILABLE_MOVES[0]);\n\n    const handleKeyDown = event => {\n        const index = AVAILABLE_MOVES.indexOf(event.key);\n        if (index > -1) {\n            setDirection(AVAILABLE_MOVES[index]);\n        }\n    };\n\n    React.useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n    });\n\n    React.useEffect(\n        () => {\n            const interval = gameLoop();\n            return () => clearInterval(interval);\n        },\n        [snake]\n    );\n    const generateFood = () => {\n        let newFood;\n        do {\n            newFood = [\n                Math.floor(Math.random() * BOARD_SIZE),\n                Math.floor(Math.random() * BOARD_SIZE),\n            ];\n        } while (\n            snake.some(elem => elem[0] === newFood[0] && elem[1] === newFood[1])\n        );\n        setFood(newFood);\n    };\n    const gameLoop = () => {\n        const timerId = setTimeout(() => {\n            const newSnake = snake;\n            let move = [];\n\n            switch (direction) {\n                case AVAILABLE_MOVES[0]:\n                    move = [1, 0];\n                    break;\n                case AVAILABLE_MOVES[1]:\n                    move = [-1, 0];\n                    break;\n                case AVAILABLE_MOVES[2]:\n                    move = [0, 1];\n                    break;\n                case AVAILABLE_MOVES[3]:\n                    move = [0, -1];\n                    break;\n            }\n\n            const headSnake = [\n                checkAvailableSlot(newSnake[newSnake.length - 1][0] + move[0]),\n                checkAvailableSlot(newSnake[newSnake.length - 1][1] + move[1]),\n            ];\n\n            newSnake.push(headSnake);\n            let sliceIndex = 1;\n            if (headSnake[0] === food[0] && headSnake[1] === food[1]) {\n                sliceIndex = 0;\n                generateFood();\n            }\n            setSnake(newSnake.slice(sliceIndex));\n        }, SPEED);\n        return timerId;\n    };\n\n    return (\n        <div>\n            {DEFAULT_CELLS_VALUE.map((row, indexR) =>\n                <div key={indexR} className=\"row\">\n                    {row.map((cell, indexC) => {\n                        let type =\n                            snake.some(\n                                elem => elem[0] === indexR && elem[1] === indexC\n                            ) && 'snake';\n                        if (type !== 'snake') {\n                            type =\n                                food[0] === indexR &&\n                                food[1] === indexC &&\n                                'food';\n                        }\n                        return <Cell key={indexC} type={type} />;\n                    })}\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst Cell = ({ type }) => {\n    return <div className={`cell ${type}`} />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}