{"version":3,"sources":["App.js","index.js"],"names":["BOARD_SIZE","DEFAULT_CELLS_VALUE","Array","fill","AVAILABLE_MOVES","checkAvailableSlot","position","Cell","type","className","App","React","useState","snake","setSnake","food","setFood","direction","setDirection","handleKeyDown","event","index","indexOf","key","useEffect","document","addEventListener","interval","gameLoop","clearInterval","setTimeout","newSnake","move","headSnake","length","push","sliceIndex","newFood","Math","floor","random","some","elem","generateFood","slice","map","row","indexR","cell","indexC","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MAGMA,EAAa,GACbC,EAAsBC,MAAMF,GAAYG,KAAKD,MAAMF,GAAYG,KAAK,IACpEC,EAAkB,CAAC,YAAa,UAAW,aAAc,aAGzDC,EAAqB,SAAAC,GACvB,QAAQ,GACJ,KAAKA,GAAYN,EACb,OAAO,EACX,KAAKM,EAAW,EACZ,OAAON,EACX,QACI,OAAOM,IAkGbC,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OAAO,qBAAKC,UAAS,eAAUD,MAGpBE,EAlGH,WACR,MAA0BC,IAAMC,SAAS,CAAC,CAAC,EAAG,KAA9C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBH,IAAMC,SAAS,CAAC,EAAG,IAA3C,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCL,IAAMC,SAASR,EAAgB,IAAjE,mBAAOa,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,SAAAC,GAClB,IAAMC,EAAQjB,EAAgBkB,QAAQF,EAAMG,KACxCF,GAAS,GACTH,EAAad,EAAgBiB,KAIrCV,IAAMa,WAAU,WACZC,SAASC,iBAAiB,UAAWP,MAGzCR,IAAMa,WACF,WACI,IAAMG,EAAWC,IACjB,OAAO,kBAAMC,cAAcF,MAE/B,CAACd,IAEL,IAYMe,EAAW,WAiCb,OAhCgBE,YAAW,WACvB,IAAMC,EAAWlB,EACbmB,EAAO,GAEX,OAAQf,GACJ,KAAKb,EAAgB,GACjB4B,EAAO,CAAC,EAAG,GACX,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,EAAE,EAAG,GACZ,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,CAAC,EAAG,GACX,MACJ,KAAK5B,EAAgB,GACjB4B,EAAO,CAAC,GAAI,GAIpB,IAAMC,EAAY,CACd5B,EAAmB0B,EAASA,EAASG,OAAS,GAAG,GAAKF,EAAK,IAC3D3B,EAAmB0B,EAASA,EAASG,OAAS,GAAG,GAAKF,EAAK,KAG/DD,EAASI,KAAKF,GACd,IAAIG,EAAa,EACbH,EAAU,KAAOlB,EAAK,IAAMkB,EAAU,KAAOlB,EAAK,KAClDqB,EAAa,EAxCJ,WACjB,IAAIC,EACJ,GACIA,EAAU,CACNC,KAAKC,MAAMD,KAAKE,SAAWxC,GAC3BsC,KAAKC,MAAMD,KAAKE,SAAWxC,UAG/Ba,EAAM4B,MAAK,SAAAC,GAAI,OAAIA,EAAK,KAAOL,EAAQ,IAAMK,EAAK,KAAOL,EAAQ,OAErErB,EAAQqB,GA+BAM,IAEJ7B,EAASiB,EAASa,MAAMR,MA/EtB,MAoFV,OACI,8BACKnC,EAAoB4C,KAAI,SAACC,EAAKC,GAAN,OACrB,qBAAkBtC,UAAU,MAA5B,SACKqC,EAAID,KAAI,SAACG,EAAMC,GACZ,IAAIzC,EACAK,EAAM4B,MACF,SAAAC,GAAI,OAAIA,EAAK,KAAOK,GAAUL,EAAK,KAAOO,MACzC,QAOT,MANa,UAATzC,IACAA,EACIO,EAAK,KAAOgC,GACZhC,EAAK,KAAOkC,GACZ,QAED,cAAC,EAAD,CAAmBzC,KAAMA,GAAdyC,OAZhBF,SCxF1BG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,U","file":"static/js/main.cd909cce.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst BOARD_SIZE = 10;\r\nconst DEFAULT_CELLS_VALUE = Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(0));\r\nconst AVAILABLE_MOVES = ['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft'];\r\nconst SPEED = 500;\r\n\r\nconst checkAvailableSlot = position => {\r\n    switch (true) {\r\n        case position >= BOARD_SIZE:\r\n            return 0;\r\n        case position < 0:\r\n            return BOARD_SIZE - 1;\r\n        default:\r\n            return position;\r\n    }\r\n};\r\n\r\nconst App = () => {\r\n    const [snake, setSnake] = React.useState([[1, 1]]);\r\n    const [food, setFood] = React.useState([0, 0]);\r\n    const [direction, setDirection] = React.useState(AVAILABLE_MOVES[0]);\r\n\r\n    const handleKeyDown = event => {\r\n        const index = AVAILABLE_MOVES.indexOf(event.key);\r\n        if (index > -1) {\r\n            setDirection(AVAILABLE_MOVES[index]);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown);\r\n    });\r\n\r\n    React.useEffect(\r\n        () => {\r\n            const interval = gameLoop();\r\n            return () => clearInterval(interval);\r\n        },\r\n        [snake]\r\n    );\r\n    const generateFood = () => {\r\n        let newFood;\r\n        do {\r\n            newFood = [\r\n                Math.floor(Math.random() * BOARD_SIZE),\r\n                Math.floor(Math.random() * BOARD_SIZE),\r\n            ];\r\n        } while (\r\n            snake.some(elem => elem[0] === newFood[0] && elem[1] === newFood[1])\r\n        );\r\n        setFood(newFood);\r\n    };\r\n    const gameLoop = () => {\r\n        const timerId = setTimeout(() => {\r\n            const newSnake = snake;\r\n            let move = [];\r\n\r\n            switch (direction) {\r\n                case AVAILABLE_MOVES[0]:\r\n                    move = [1, 0];\r\n                    break;\r\n                case AVAILABLE_MOVES[1]:\r\n                    move = [-1, 0];\r\n                    break;\r\n                case AVAILABLE_MOVES[2]:\r\n                    move = [0, 1];\r\n                    break;\r\n                case AVAILABLE_MOVES[3]:\r\n                    move = [0, -1];\r\n                    break;\r\n            }\r\n\r\n            const headSnake = [\r\n                checkAvailableSlot(newSnake[newSnake.length - 1][0] + move[0]),\r\n                checkAvailableSlot(newSnake[newSnake.length - 1][1] + move[1]),\r\n            ];\r\n\r\n            newSnake.push(headSnake);\r\n            let sliceIndex = 1;\r\n            if (headSnake[0] === food[0] && headSnake[1] === food[1]) {\r\n                sliceIndex = 0;\r\n                generateFood();\r\n            }\r\n            setSnake(newSnake.slice(sliceIndex));\r\n        }, SPEED);\r\n        return timerId;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {DEFAULT_CELLS_VALUE.map((row, indexR) =>\r\n                <div key={indexR} className=\"row\">\r\n                    {row.map((cell, indexC) => {\r\n                        let type =\r\n                            snake.some(\r\n                                elem => elem[0] === indexR && elem[1] === indexC\r\n                            ) && 'snake';\r\n                        if (type !== 'snake') {\r\n                            type =\r\n                                food[0] === indexR &&\r\n                                food[1] === indexC &&\r\n                                'food';\r\n                        }\r\n                        return <Cell key={indexC} type={type} />;\r\n                    })}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Cell = ({ type }) => {\r\n    return <div className={`cell ${type}`} />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}